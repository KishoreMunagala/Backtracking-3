time: O(n!)
space:O(n^2)




class Solution {
    private int n; 

    public List<List<String>> solveNQueens(int n) {
        this.n = n; 
        List<List<String>> result = new ArrayList<>();
        boolean[][] grid = new boolean[n][n];
        backtrack(grid, 0, result);
        return result;
    }

    private void backtrack(boolean[][] grid, int r, List<List<String>> result) {
        if (r == grid.length) {
            List<String> li = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                StringBuilder sb = new StringBuilder();
                for (int j = 0; j < n; j++) {
                    if (grid[i][j]) {
                        sb.append('Q');
                    } else {
                        sb.append('.');
                    }
                }
                li.add(sb.toString());
            }
            result.add(li);
            return;
        }

        for (int c = 0; c < n; c++) {
            if (isSafe(grid, r, c)) {
                grid[r][c] = true;
                backtrack(grid, r + 1, result);
                grid[r][c] = false;  
            }
        }
    }

    private boolean isSafe(boolean[][] grid, int r, int c) {
     
        for (int i = 0; i < r; i++) {
            if (grid[i][c]) {
                return false;
            }
        }
        
        int i = r, j = c;
        while (i >= 0 && j >= 0) {
            if (grid[i][j]) {
                return false;
            }
            i--;
            j--;
        }
        
        i = r;
        j = c;
        while (i >= 0 && j < grid.length) {
            if (grid[i][j]) {
                return false;
            }
            i--;
            j++;
        }
        return true;
    }
}



