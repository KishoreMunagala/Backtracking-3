time: O(m*n)
space:O(l)


class Solution 
{
    int[][] dirs;
    int m;
    int n;

    public boolean exist(char[][] board, String word) 
    {
        this.dirs = new int[][]{{0, 1}, {1, 0}, {-1, 0}, {0, -1}};
        this.m = board.length;
        this.n = board[0].length;

        for (int i = 0; i < m; i++) 
        {
            for (int j = 0; j < n; j++) 
            {
                if (backtrack(board, i, j, word, 0)) 
                {
                    return true;  
                }
            }
        }
        return false;  
    }

    private boolean backtrack(char[][] board, int r, int c, String word, int idx) 
    {
    
        if (r < 0 || c < 0 || r == m || c == n || board[r][c] != word.charAt(idx)) 
        {
            return false;
        }
        if (idx == word.length() - 1) {
            return true;
        }

        char temp = board[r][c];
        board[r][c] = '#';
        for (int[] dir : dirs) 
        {
            int nr = r + dir[0];
            int nc = c + dir[1];
            if (backtrack(board, nr, nc, word, idx + 1)) 
            {
                return true;
            }
        }

        board[r][c] = temp;
        return false;
    }
}
